{"version":3,"file":"static/js/760.3fe30d2c.chunk.js","mappings":"6LAEaA,EAAS,WACpB,OACE,+BACE,SAAC,KAAD,CACEC,MAAM,UACNC,OAAQ,GACRC,MAAO,GACPC,aAAc,CACZC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,4BAKpB,C,8JCeD,EA9Ba,WACX,MCA0B,WAC1B,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,CAAC,GAAlC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAgBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,8GAEuBC,EAAAA,EAAAA,IAAgBV,GAFvC,OAEUW,EAFV,OAGIP,EAAQO,EAAKR,MAHjB,gDAKIG,EAAS,EAAD,IACRM,QAAQC,IAAR,MANJ,yBAQIL,GAAW,GARf,6EAFc,sBACdA,GAAW,GADG,mCAadM,EACD,GAAE,CAACd,IACG,CAAEK,MAAAA,EAAOF,KAAAA,EAAMI,QAAAA,EACvB,CDrBkCQ,GAAzBZ,EAAR,EAAQA,KAAME,EAAd,EAAcA,MAAOE,EAArB,EAAqBA,QACrB,OACE,gCACGF,IAAS,qEACTE,IAAW,SAAChB,EAAA,EAAD,KACZ,yBACGY,EAAKa,OAAS,GACb,wBACGb,EAAKc,MAAM,EAAG,IAAIC,KAAI,SAAAC,GAAE,OACvB,yBACE,4BACE,gBACEzB,MAAO,IACP0B,IAAG,yCAAoCD,EAAGE,cAC1CC,IAAKH,EAAGI,QAEV,uBAAIJ,EAAGI,WAPFJ,EAAGK,GADW,OAc3B,yEAKT,C,+NE5BDC,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAW,mCAAG,sGACFF,IAAAA,IAAA,mCAAsCC,IADpC,uBACjBf,EADiB,EACjBA,KADiB,kBAGlBA,GAHkB,2CAAH,qDAMXiB,EAAe,mCAAG,WAAM5B,GAAN,yFACNyB,IAAAA,IAAA,gBAAmBzB,EAAnB,oBAAsC0B,IADhC,uBACrBf,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,sDAMfD,EAAe,mCAAG,WAAMV,GAAN,yFACNyB,IAAAA,IAAA,gBACZzB,EADY,4BACe0B,IAFT,uBACrBf,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,sDAOfkB,EAAe,mCAAG,WAAM7B,GAAN,yFACNyB,IAAAA,IAAA,gBACZzB,EADY,4BACe0B,IAFT,uBACrBf,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,sDAOfmB,EAAe,mCAAG,WAAMC,GAAN,yFACNN,IAAAA,IAAA,+BACGC,EADH,kBACoBK,IAFd,uBACrBpB,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,sDAO5BiB,EAAgBI,UAAY,CAC1BhC,QAASiC,IAAAA,QAGXvB,EAAgBsB,UAAY,CAC1BhC,QAASiC,IAAAA,QAGXJ,EAAgBG,UAAY,CAC1BhC,QAASiC,IAAAA,QAGXH,EAAgBE,UAAY,CAC1BhC,QAASiC,IAAAA,O","sources":["components/Loader/Loader.jsx","pages/Cast/Cast.jsx","hooks/useFetchCast.jsx","services/movie-service.js"],"sourcesContent":["import { Bars } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <>\n      <Bars\n        color=\"#1a5c72\"\n        height={80}\n        width={80}\n        wrapperStyle={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n        }}\n      />\n    </>\n  );\n};\n","import { Loader } from 'components/Loader/Loader';\nimport { useFetchCast } from 'hooks/useFetchCast';\n\nconst Cast = () => {\n  const { cast, error, loading } = useFetchCast();\n  return (\n    <>\n      {error && <p>There is no info about cast of this movie</p>}\n      {loading && <Loader />}\n      <div>\n        {cast.length > 0 ? (\n          <ul>\n            {cast.slice(0, 10).map(el => (\n              <li key={el.id}>\n                <div>\n                  <img\n                    width={200}\n                    src={`https://image.tmdb.org/t/p/w500${el.profile_path}`}\n                    alt={el.name}\n                  />\n                  <p>{el.name}</p>\n                </div>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>There is no info about cast of this movie</p>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Cast;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from '../services/movie-service';\n\nexport const useFetchCast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState({});\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    async function getCast() {\n      try {\n        const data = await getMovieCredits(movieId);\n        setCast(data.cast);\n      } catch (error) {\n        setError(error);\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getCast();\n  }, [movieId]);\n  return { error, cast, loading };\n};\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'c3dfb97c4e42ba6803ce4a8859444b9b';\n\nexport const fetchMovies = async () => {\n  const { data } = await axios.get(`trending/all/day?api_key=${API_KEY}`);\n\n  return data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const { data } = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n\n  return data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const getMovieByQuery = async query => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return data;\n};\n\ngetMovieDetails.propTypes = {\n  movieId: PropTypes.string,\n};\n\ngetMovieCredits.propTypes = {\n  movieId: PropTypes.string,\n};\n\ngetMovieReviews.propTypes = {\n  movieId: PropTypes.string,\n};\n\ngetMovieByQuery.propTypes = {\n  movieId: PropTypes.string,\n};\n"],"names":["Loader","color","height","width","wrapperStyle","position","top","left","transform","movieId","useParams","useState","cast","setCast","error","setError","loading","setLoading","useEffect","getMovieCredits","data","console","log","getCast","useFetchCast","length","slice","map","el","src","profile_path","alt","name","id","axios","API_KEY","fetchMovies","getMovieDetails","getMovieReviews","getMovieByQuery","query","propTypes","PropTypes"],"sourceRoot":""}